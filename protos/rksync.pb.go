// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/rkcloudchain/rksync/protos/rksync.proto

package protos

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RKSyncMessage_Tag int32

const (
	RKSyncMessage_EMPTY     RKSyncMessage_Tag = 0
	RKSyncMessage_CHAN_ONLY RKSyncMessage_Tag = 1
)

var RKSyncMessage_Tag_name = map[int32]string{
	0: "EMPTY",
	1: "CHAN_ONLY",
}

var RKSyncMessage_Tag_value = map[string]int32{
	"EMPTY":     0,
	"CHAN_ONLY": 1,
}

func (x RKSyncMessage_Tag) String() string {
	return proto.EnumName(RKSyncMessage_Tag_name, int32(x))
}

func (RKSyncMessage_Tag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{1, 0}
}

type File_Mode int32

const (
	File_Append File_Mode = 0
	File_Random File_Mode = 1
)

var File_Mode_name = map[int32]string{
	0: "Append",
	1: "Random",
}

var File_Mode_value = map[string]int32{
	"Append": 0,
	"Random": 1,
}

func (x File_Mode) String() string {
	return proto.EnumName(File_Mode_name, int32(x))
}

func (File_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{12, 0}
}

type Envelope struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{0}
}
func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(m, src)
}
func (m *Envelope) XXX_Size() int {
	return m.Size()
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

type RKSyncMessage struct {
	Nonce    uint64            `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ChainMac []byte            `protobuf:"bytes,2,opt,name=chain_mac,json=chainMac,proto3" json:"chain_mac,omitempty"`
	Tag      RKSyncMessage_Tag `protobuf:"varint,3,opt,name=tag,proto3,enum=protos.RKSyncMessage_Tag" json:"tag,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*RKSyncMessage_AliveMsg
	//	*RKSyncMessage_Empty
	//	*RKSyncMessage_Conn
	//	*RKSyncMessage_Ack
	//	*RKSyncMessage_MemReq
	//	*RKSyncMessage_MemRes
	//	*RKSyncMessage_State
	//	*RKSyncMessage_StatePullRequest
	//	*RKSyncMessage_StatePullResponse
	//	*RKSyncMessage_StateInfo
	//	*RKSyncMessage_DataMsg
	//	*RKSyncMessage_DataReq
	Content              isRKSyncMessage_Content `protobuf_oneof:"content"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RKSyncMessage) Reset()         { *m = RKSyncMessage{} }
func (m *RKSyncMessage) String() string { return proto.CompactTextString(m) }
func (*RKSyncMessage) ProtoMessage()    {}
func (*RKSyncMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{1}
}
func (m *RKSyncMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RKSyncMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RKSyncMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RKSyncMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RKSyncMessage.Merge(m, src)
}
func (m *RKSyncMessage) XXX_Size() int {
	return m.Size()
}
func (m *RKSyncMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RKSyncMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RKSyncMessage proto.InternalMessageInfo

type isRKSyncMessage_Content interface {
	isRKSyncMessage_Content()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RKSyncMessage_AliveMsg struct {
	AliveMsg *AliveMessage `protobuf:"bytes,5,opt,name=alive_msg,json=aliveMsg,proto3,oneof"`
}
type RKSyncMessage_Empty struct {
	Empty *types.Empty `protobuf:"bytes,6,opt,name=empty,proto3,oneof"`
}
type RKSyncMessage_Conn struct {
	Conn *ConnEstablish `protobuf:"bytes,7,opt,name=conn,proto3,oneof"`
}
type RKSyncMessage_Ack struct {
	Ack *Acknowledgement `protobuf:"bytes,8,opt,name=ack,proto3,oneof"`
}
type RKSyncMessage_MemReq struct {
	MemReq *MembershipRequest `protobuf:"bytes,9,opt,name=mem_req,json=memReq,proto3,oneof"`
}
type RKSyncMessage_MemRes struct {
	MemRes *MembershipResponse `protobuf:"bytes,10,opt,name=mem_res,json=memRes,proto3,oneof"`
}
type RKSyncMessage_State struct {
	State *ChainState `protobuf:"bytes,11,opt,name=state,proto3,oneof"`
}
type RKSyncMessage_StatePullRequest struct {
	StatePullRequest *ChainStatePullRequest `protobuf:"bytes,12,opt,name=state_pull_request,json=statePullRequest,proto3,oneof"`
}
type RKSyncMessage_StatePullResponse struct {
	StatePullResponse *ChainStatePullResponse `protobuf:"bytes,13,opt,name=state_pull_response,json=statePullResponse,proto3,oneof"`
}
type RKSyncMessage_StateInfo struct {
	StateInfo *ChainStateInfo `protobuf:"bytes,14,opt,name=state_info,json=stateInfo,proto3,oneof"`
}
type RKSyncMessage_DataMsg struct {
	DataMsg *DataMessage `protobuf:"bytes,15,opt,name=data_msg,json=dataMsg,proto3,oneof"`
}
type RKSyncMessage_DataReq struct {
	DataReq *DataRequest `protobuf:"bytes,16,opt,name=data_req,json=dataReq,proto3,oneof"`
}

func (*RKSyncMessage_AliveMsg) isRKSyncMessage_Content()          {}
func (*RKSyncMessage_Empty) isRKSyncMessage_Content()             {}
func (*RKSyncMessage_Conn) isRKSyncMessage_Content()              {}
func (*RKSyncMessage_Ack) isRKSyncMessage_Content()               {}
func (*RKSyncMessage_MemReq) isRKSyncMessage_Content()            {}
func (*RKSyncMessage_MemRes) isRKSyncMessage_Content()            {}
func (*RKSyncMessage_State) isRKSyncMessage_Content()             {}
func (*RKSyncMessage_StatePullRequest) isRKSyncMessage_Content()  {}
func (*RKSyncMessage_StatePullResponse) isRKSyncMessage_Content() {}
func (*RKSyncMessage_StateInfo) isRKSyncMessage_Content()         {}
func (*RKSyncMessage_DataMsg) isRKSyncMessage_Content()           {}
func (*RKSyncMessage_DataReq) isRKSyncMessage_Content()           {}

func (m *RKSyncMessage) GetContent() isRKSyncMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *RKSyncMessage) GetAliveMsg() *AliveMessage {
	if x, ok := m.GetContent().(*RKSyncMessage_AliveMsg); ok {
		return x.AliveMsg
	}
	return nil
}

func (m *RKSyncMessage) GetEmpty() *types.Empty {
	if x, ok := m.GetContent().(*RKSyncMessage_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *RKSyncMessage) GetConn() *ConnEstablish {
	if x, ok := m.GetContent().(*RKSyncMessage_Conn); ok {
		return x.Conn
	}
	return nil
}

func (m *RKSyncMessage) GetAck() *Acknowledgement {
	if x, ok := m.GetContent().(*RKSyncMessage_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *RKSyncMessage) GetMemReq() *MembershipRequest {
	if x, ok := m.GetContent().(*RKSyncMessage_MemReq); ok {
		return x.MemReq
	}
	return nil
}

func (m *RKSyncMessage) GetMemRes() *MembershipResponse {
	if x, ok := m.GetContent().(*RKSyncMessage_MemRes); ok {
		return x.MemRes
	}
	return nil
}

func (m *RKSyncMessage) GetState() *ChainState {
	if x, ok := m.GetContent().(*RKSyncMessage_State); ok {
		return x.State
	}
	return nil
}

func (m *RKSyncMessage) GetStatePullRequest() *ChainStatePullRequest {
	if x, ok := m.GetContent().(*RKSyncMessage_StatePullRequest); ok {
		return x.StatePullRequest
	}
	return nil
}

func (m *RKSyncMessage) GetStatePullResponse() *ChainStatePullResponse {
	if x, ok := m.GetContent().(*RKSyncMessage_StatePullResponse); ok {
		return x.StatePullResponse
	}
	return nil
}

func (m *RKSyncMessage) GetStateInfo() *ChainStateInfo {
	if x, ok := m.GetContent().(*RKSyncMessage_StateInfo); ok {
		return x.StateInfo
	}
	return nil
}

func (m *RKSyncMessage) GetDataMsg() *DataMessage {
	if x, ok := m.GetContent().(*RKSyncMessage_DataMsg); ok {
		return x.DataMsg
	}
	return nil
}

func (m *RKSyncMessage) GetDataReq() *DataRequest {
	if x, ok := m.GetContent().(*RKSyncMessage_DataReq); ok {
		return x.DataReq
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RKSyncMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RKSyncMessage_OneofMarshaler, _RKSyncMessage_OneofUnmarshaler, _RKSyncMessage_OneofSizer, []interface{}{
		(*RKSyncMessage_AliveMsg)(nil),
		(*RKSyncMessage_Empty)(nil),
		(*RKSyncMessage_Conn)(nil),
		(*RKSyncMessage_Ack)(nil),
		(*RKSyncMessage_MemReq)(nil),
		(*RKSyncMessage_MemRes)(nil),
		(*RKSyncMessage_State)(nil),
		(*RKSyncMessage_StatePullRequest)(nil),
		(*RKSyncMessage_StatePullResponse)(nil),
		(*RKSyncMessage_StateInfo)(nil),
		(*RKSyncMessage_DataMsg)(nil),
		(*RKSyncMessage_DataReq)(nil),
	}
}

func _RKSyncMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RKSyncMessage)
	// content
	switch x := m.Content.(type) {
	case *RKSyncMessage_AliveMsg:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AliveMsg); err != nil {
			return err
		}
	case *RKSyncMessage_Empty:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *RKSyncMessage_Conn:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Conn); err != nil {
			return err
		}
	case *RKSyncMessage_Ack:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case *RKSyncMessage_MemReq:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MemReq); err != nil {
			return err
		}
	case *RKSyncMessage_MemRes:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MemRes); err != nil {
			return err
		}
	case *RKSyncMessage_State:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.State); err != nil {
			return err
		}
	case *RKSyncMessage_StatePullRequest:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatePullRequest); err != nil {
			return err
		}
	case *RKSyncMessage_StatePullResponse:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatePullResponse); err != nil {
			return err
		}
	case *RKSyncMessage_StateInfo:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateInfo); err != nil {
			return err
		}
	case *RKSyncMessage_DataMsg:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataMsg); err != nil {
			return err
		}
	case *RKSyncMessage_DataReq:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataReq); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RKSyncMessage.Content has unexpected type %T", x)
	}
	return nil
}

func _RKSyncMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RKSyncMessage)
	switch tag {
	case 5: // content.alive_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AliveMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_AliveMsg{msg}
		return true, err
	case 6: // content.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Empty)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_Empty{msg}
		return true, err
	case 7: // content.conn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConnEstablish)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_Conn{msg}
		return true, err
	case 8: // content.ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Acknowledgement)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_Ack{msg}
		return true, err
	case 9: // content.mem_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MembershipRequest)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_MemReq{msg}
		return true, err
	case 10: // content.mem_res
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MembershipResponse)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_MemRes{msg}
		return true, err
	case 11: // content.state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChainState)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_State{msg}
		return true, err
	case 12: // content.state_pull_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChainStatePullRequest)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_StatePullRequest{msg}
		return true, err
	case 13: // content.state_pull_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChainStatePullResponse)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_StatePullResponse{msg}
		return true, err
	case 14: // content.state_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChainStateInfo)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_StateInfo{msg}
		return true, err
	case 15: // content.data_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_DataMsg{msg}
		return true, err
	case 16: // content.data_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataRequest)
		err := b.DecodeMessage(msg)
		m.Content = &RKSyncMessage_DataReq{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RKSyncMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RKSyncMessage)
	// content
	switch x := m.Content.(type) {
	case *RKSyncMessage_AliveMsg:
		s := proto.Size(x.AliveMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_Empty:
		s := proto.Size(x.Empty)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_Conn:
		s := proto.Size(x.Conn)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_Ack:
		s := proto.Size(x.Ack)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_MemReq:
		s := proto.Size(x.MemReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_MemRes:
		s := proto.Size(x.MemRes)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_State:
		s := proto.Size(x.State)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_StatePullRequest:
		s := proto.Size(x.StatePullRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_StatePullResponse:
		s := proto.Size(x.StatePullResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_StateInfo:
		s := proto.Size(x.StateInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_DataMsg:
		s := proto.Size(x.DataMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RKSyncMessage_DataReq:
		s := proto.Size(x.DataReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ConnEstablish struct {
	PkiId                []byte   `protobuf:"bytes,1,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	Identity             []byte   `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnEstablish) Reset()         { *m = ConnEstablish{} }
func (m *ConnEstablish) String() string { return proto.CompactTextString(m) }
func (*ConnEstablish) ProtoMessage()    {}
func (*ConnEstablish) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{2}
}
func (m *ConnEstablish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnEstablish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnEstablish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnEstablish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnEstablish.Merge(m, src)
}
func (m *ConnEstablish) XXX_Size() int {
	return m.Size()
}
func (m *ConnEstablish) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnEstablish.DiscardUnknown(m)
}

var xxx_messageInfo_ConnEstablish proto.InternalMessageInfo

type AliveMessage struct {
	Membership           *Member   `protobuf:"bytes,1,opt,name=membership,proto3" json:"membership,omitempty"`
	Timestamp            *PeerTime `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Identity             []byte    `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AliveMessage) Reset()         { *m = AliveMessage{} }
func (m *AliveMessage) String() string { return proto.CompactTextString(m) }
func (*AliveMessage) ProtoMessage()    {}
func (*AliveMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{3}
}
func (m *AliveMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliveMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AliveMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AliveMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliveMessage.Merge(m, src)
}
func (m *AliveMessage) XXX_Size() int {
	return m.Size()
}
func (m *AliveMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AliveMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AliveMessage proto.InternalMessageInfo

type PeerTime struct {
	IncNum               uint64   `protobuf:"varint,1,opt,name=inc_num,json=incNum,proto3" json:"inc_num,omitempty"`
	SeqNum               uint64   `protobuf:"varint,2,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerTime) Reset()         { *m = PeerTime{} }
func (m *PeerTime) String() string { return proto.CompactTextString(m) }
func (*PeerTime) ProtoMessage()    {}
func (*PeerTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{4}
}
func (m *PeerTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerTime.Merge(m, src)
}
func (m *PeerTime) XXX_Size() int {
	return m.Size()
}
func (m *PeerTime) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerTime.DiscardUnknown(m)
}

var xxx_messageInfo_PeerTime proto.InternalMessageInfo

type Member struct {
	Endpoint             string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	PkiId                []byte   `protobuf:"bytes,2,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{5}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return m.Size()
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

type Acknowledgement struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acknowledgement) Reset()         { *m = Acknowledgement{} }
func (m *Acknowledgement) String() string { return proto.CompactTextString(m) }
func (*Acknowledgement) ProtoMessage()    {}
func (*Acknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{6}
}
func (m *Acknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Acknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Acknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Acknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acknowledgement.Merge(m, src)
}
func (m *Acknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *Acknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_Acknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_Acknowledgement proto.InternalMessageInfo

type MembershipRequest struct {
	SelfInformation      *Envelope `protobuf:"bytes,1,opt,name=self_information,json=selfInformation,proto3" json:"self_information,omitempty"`
	Known                [][]byte  `protobuf:"bytes,2,rep,name=known,proto3" json:"known,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MembershipRequest) Reset()         { *m = MembershipRequest{} }
func (m *MembershipRequest) String() string { return proto.CompactTextString(m) }
func (*MembershipRequest) ProtoMessage()    {}
func (*MembershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{7}
}
func (m *MembershipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MembershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MembershipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MembershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MembershipRequest.Merge(m, src)
}
func (m *MembershipRequest) XXX_Size() int {
	return m.Size()
}
func (m *MembershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MembershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MembershipRequest proto.InternalMessageInfo

type MembershipResponse struct {
	Alive                []*Envelope `protobuf:"bytes,1,rep,name=alive,proto3" json:"alive,omitempty"`
	Dead                 []*Envelope `protobuf:"bytes,2,rep,name=dead,proto3" json:"dead,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MembershipResponse) Reset()         { *m = MembershipResponse{} }
func (m *MembershipResponse) String() string { return proto.CompactTextString(m) }
func (*MembershipResponse) ProtoMessage()    {}
func (*MembershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{8}
}
func (m *MembershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MembershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MembershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MembershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MembershipResponse.Merge(m, src)
}
func (m *MembershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MembershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MembershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MembershipResponse proto.InternalMessageInfo

type ChainState struct {
	SeqNum               uint64    `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	ChainId              string    `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Envelope             *Envelope `protobuf:"bytes,3,opt,name=envelope,proto3" json:"envelope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ChainState) Reset()         { *m = ChainState{} }
func (m *ChainState) String() string { return proto.CompactTextString(m) }
func (*ChainState) ProtoMessage()    {}
func (*ChainState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{9}
}
func (m *ChainState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainState.Merge(m, src)
}
func (m *ChainState) XXX_Size() int {
	return m.Size()
}
func (m *ChainState) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainState.DiscardUnknown(m)
}

var xxx_messageInfo_ChainState proto.InternalMessageInfo

type ChainStateInfo struct {
	Leader               []byte      `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
	Properties           *Properties `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ChainStateInfo) Reset()         { *m = ChainStateInfo{} }
func (m *ChainStateInfo) String() string { return proto.CompactTextString(m) }
func (*ChainStateInfo) ProtoMessage()    {}
func (*ChainStateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{10}
}
func (m *ChainStateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainStateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainStateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainStateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainStateInfo.Merge(m, src)
}
func (m *ChainStateInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChainStateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainStateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChainStateInfo proto.InternalMessageInfo

type Properties struct {
	Members              [][]byte `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	Files                []*File  `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Properties) Reset()         { *m = Properties{} }
func (m *Properties) String() string { return proto.CompactTextString(m) }
func (*Properties) ProtoMessage()    {}
func (*Properties) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{11}
}
func (m *Properties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Properties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Properties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Properties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Properties.Merge(m, src)
}
func (m *Properties) XXX_Size() int {
	return m.Size()
}
func (m *Properties) XXX_DiscardUnknown() {
	xxx_messageInfo_Properties.DiscardUnknown(m)
}

var xxx_messageInfo_Properties proto.InternalMessageInfo

type File struct {
	Path                 string    `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Mode                 File_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=protos.File_Mode" json:"mode,omitempty"`
	Metadata             []byte    `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{12}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_File.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return m.Size()
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

type ChainStatePullResponse struct {
	Element              *Envelope `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ChainStatePullResponse) Reset()         { *m = ChainStatePullResponse{} }
func (m *ChainStatePullResponse) String() string { return proto.CompactTextString(m) }
func (*ChainStatePullResponse) ProtoMessage()    {}
func (*ChainStatePullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{13}
}
func (m *ChainStatePullResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainStatePullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainStatePullResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainStatePullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainStatePullResponse.Merge(m, src)
}
func (m *ChainStatePullResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChainStatePullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainStatePullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainStatePullResponse proto.InternalMessageInfo

type ChainStatePullRequest struct {
	Timestamp            *PeerTime `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ChainStatePullRequest) Reset()         { *m = ChainStatePullRequest{} }
func (m *ChainStatePullRequest) String() string { return proto.CompactTextString(m) }
func (*ChainStatePullRequest) ProtoMessage()    {}
func (*ChainStatePullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{14}
}
func (m *ChainStatePullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainStatePullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainStatePullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainStatePullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainStatePullRequest.Merge(m, src)
}
func (m *ChainStatePullRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChainStatePullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainStatePullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainStatePullRequest proto.InternalMessageInfo

type DataMessage struct {
	FileName             string   `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Payload              *Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataMessage) Reset()         { *m = DataMessage{} }
func (m *DataMessage) String() string { return proto.CompactTextString(m) }
func (*DataMessage) ProtoMessage()    {}
func (*DataMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{15}
}
func (m *DataMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataMessage.Merge(m, src)
}
func (m *DataMessage) XXX_Size() int {
	return m.Size()
}
func (m *DataMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DataMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DataMessage proto.InternalMessageInfo

type Payload struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Types that are valid to be assigned to Metadata:
	//	*Payload_Append
	Metadata             isPayload_Metadata `protobuf_oneof:"metadata"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{16}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return m.Size()
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

type isPayload_Metadata interface {
	isPayload_Metadata()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Payload_Append struct {
	Append *AppendMetadata `protobuf:"bytes,3,opt,name=append,proto3,oneof"`
}

func (*Payload_Append) isPayload_Metadata() {}

func (m *Payload) GetMetadata() isPayload_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Payload) GetAppend() *AppendMetadata {
	if x, ok := m.GetMetadata().(*Payload_Append); ok {
		return x.Append
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Payload) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Payload_OneofMarshaler, _Payload_OneofUnmarshaler, _Payload_OneofSizer, []interface{}{
		(*Payload_Append)(nil),
	}
}

func _Payload_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Payload)
	// metadata
	switch x := m.Metadata.(type) {
	case *Payload_Append:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Append); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Payload.Metadata has unexpected type %T", x)
	}
	return nil
}

func _Payload_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Payload)
	switch tag {
	case 3: // metadata.append
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppendMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &Payload_Append{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Payload_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Payload)
	// metadata
	switch x := m.Metadata.(type) {
	case *Payload_Append:
		s := proto.Size(x.Append)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AppendMetadata struct {
	Start                int64    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Length               int64    `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendMetadata) Reset()         { *m = AppendMetadata{} }
func (m *AppendMetadata) String() string { return proto.CompactTextString(m) }
func (*AppendMetadata) ProtoMessage()    {}
func (*AppendMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{17}
}
func (m *AppendMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppendMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppendMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppendMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendMetadata.Merge(m, src)
}
func (m *AppendMetadata) XXX_Size() int {
	return m.Size()
}
func (m *AppendMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AppendMetadata proto.InternalMessageInfo

type DataRequest struct {
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	PkiId    []byte `protobuf:"bytes,2,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*DataRequest_Append
	Req                  isDataRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DataRequest) Reset()         { *m = DataRequest{} }
func (m *DataRequest) String() string { return proto.CompactTextString(m) }
func (*DataRequest) ProtoMessage()    {}
func (*DataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{18}
}
func (m *DataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequest.Merge(m, src)
}
func (m *DataRequest) XXX_Size() int {
	return m.Size()
}
func (m *DataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequest proto.InternalMessageInfo

type isDataRequest_Req interface {
	isDataRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DataRequest_Append struct {
	Append *AppendRequest `protobuf:"bytes,4,opt,name=append,proto3,oneof"`
}

func (*DataRequest_Append) isDataRequest_Req() {}

func (m *DataRequest) GetReq() isDataRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *DataRequest) GetAppend() *AppendRequest {
	if x, ok := m.GetReq().(*DataRequest_Append); ok {
		return x.Append
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DataRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DataRequest_OneofMarshaler, _DataRequest_OneofUnmarshaler, _DataRequest_OneofSizer, []interface{}{
		(*DataRequest_Append)(nil),
	}
}

func _DataRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DataRequest)
	// req
	switch x := m.Req.(type) {
	case *DataRequest_Append:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Append); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DataRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _DataRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DataRequest)
	switch tag {
	case 4: // req.append
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppendRequest)
		err := b.DecodeMessage(msg)
		m.Req = &DataRequest_Append{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DataRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DataRequest)
	// req
	switch x := m.Req.(type) {
	case *DataRequest_Append:
		s := proto.Size(x.Append)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AppendRequest struct {
	Length               int64    `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendRequest) Reset()         { *m = AppendRequest{} }
func (m *AppendRequest) String() string { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()    {}
func (*AppendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff4fef9b2151f97, []int{19}
}
func (m *AppendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendRequest.Merge(m, src)
}
func (m *AppendRequest) XXX_Size() int {
	return m.Size()
}
func (m *AppendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendRequest proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("protos.RKSyncMessage_Tag", RKSyncMessage_Tag_name, RKSyncMessage_Tag_value)
	proto.RegisterEnum("protos.File_Mode", File_Mode_name, File_Mode_value)
	proto.RegisterType((*Envelope)(nil), "protos.Envelope")
	proto.RegisterType((*RKSyncMessage)(nil), "protos.RKSyncMessage")
	proto.RegisterType((*ConnEstablish)(nil), "protos.ConnEstablish")
	proto.RegisterType((*AliveMessage)(nil), "protos.AliveMessage")
	proto.RegisterType((*PeerTime)(nil), "protos.PeerTime")
	proto.RegisterType((*Member)(nil), "protos.Member")
	proto.RegisterType((*Acknowledgement)(nil), "protos.Acknowledgement")
	proto.RegisterType((*MembershipRequest)(nil), "protos.MembershipRequest")
	proto.RegisterType((*MembershipResponse)(nil), "protos.MembershipResponse")
	proto.RegisterType((*ChainState)(nil), "protos.ChainState")
	proto.RegisterType((*ChainStateInfo)(nil), "protos.ChainStateInfo")
	proto.RegisterType((*Properties)(nil), "protos.Properties")
	proto.RegisterType((*File)(nil), "protos.File")
	proto.RegisterType((*ChainStatePullResponse)(nil), "protos.ChainStatePullResponse")
	proto.RegisterType((*ChainStatePullRequest)(nil), "protos.ChainStatePullRequest")
	proto.RegisterType((*DataMessage)(nil), "protos.DataMessage")
	proto.RegisterType((*Payload)(nil), "protos.Payload")
	proto.RegisterType((*AppendMetadata)(nil), "protos.AppendMetadata")
	proto.RegisterType((*DataRequest)(nil), "protos.DataRequest")
	proto.RegisterType((*AppendRequest)(nil), "protos.AppendRequest")
}

func init() {
	proto.RegisterFile("github.com/rkcloudchain/rksync/protos/rksync.proto", fileDescriptor_cff4fef9b2151f97)
}

var fileDescriptor_cff4fef9b2151f97 = []byte{
	// 1219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xed, 0x6e, 0x1b, 0x45,
	0x17, 0xf6, 0xc6, 0xdf, 0x27, 0x5f, 0xee, 0xf4, 0x6b, 0x9b, 0xbe, 0xaf, 0x89, 0x56, 0x94, 0x86,
	0x16, 0x39, 0x95, 0xcb, 0x97, 0x54, 0x04, 0x6a, 0xda, 0x40, 0x02, 0x38, 0x44, 0xdb, 0xf0, 0xa3,
	0x80, 0x64, 0x4d, 0x76, 0x4f, 0x36, 0xab, 0xec, 0xcc, 0xac, 0x77, 0xc6, 0x45, 0x41, 0xe2, 0x06,
	0xb8, 0x02, 0x6e, 0x83, 0xbb, 0xe8, 0xcf, 0x5e, 0x02, 0x0d, 0x37, 0x82, 0x66, 0x66, 0x77, 0x6d,
	0xc7, 0x0e, 0xf0, 0xcb, 0x73, 0xe6, 0x3c, 0xe7, 0xf8, 0xcc, 0xb3, 0xcf, 0x39, 0x33, 0xd0, 0x8f,
	0x62, 0x75, 0x3a, 0x3e, 0xee, 0x05, 0x82, 0x6d, 0x67, 0x67, 0x41, 0x22, 0xc6, 0x61, 0x70, 0x4a,
	0x63, 0xbe, 0x9d, 0x9d, 0xc9, 0x73, 0x1e, 0x6c, 0xa7, 0x99, 0x50, 0x42, 0xe6, 0x56, 0xcf, 0x58,
	0xa4, 0x61, 0x37, 0x37, 0xee, 0x46, 0x42, 0x44, 0x09, 0x5a, 0xcc, 0xf1, 0xf8, 0x64, 0x1b, 0x59,
	0xaa, 0xce, 0x2d, 0x68, 0xe3, 0x46, 0x24, 0x22, 0x61, 0x96, 0xdb, 0x7a, 0x65, 0x77, 0xbd, 0x1d,
	0x68, 0xed, 0xf2, 0x57, 0x98, 0x88, 0x14, 0x89, 0x0b, 0xcd, 0x94, 0x9e, 0x27, 0x82, 0x86, 0xae,
	0xb3, 0xe9, 0x6c, 0xad, 0xf8, 0x85, 0x49, 0xfe, 0x07, 0x6d, 0x19, 0x47, 0x9c, 0xaa, 0x71, 0x86,
	0xee, 0x92, 0xf1, 0x4d, 0x36, 0xbc, 0x3f, 0x1a, 0xb0, 0xea, 0x7f, 0xf3, 0xe2, 0x9c, 0x07, 0x03,
	0x94, 0x92, 0x46, 0x48, 0x6e, 0x40, 0x9d, 0x0b, 0x1e, 0xa0, 0xc9, 0x53, 0xf3, 0xad, 0x41, 0xee,
	0x42, 0xdb, 0x1c, 0x65, 0xc8, 0x68, 0x90, 0x67, 0x69, 0x99, 0x8d, 0x01, 0x0d, 0xc8, 0x43, 0xa8,
	0x2a, 0x1a, 0xb9, 0xd5, 0x4d, 0x67, 0x6b, 0xad, 0x7f, 0xc7, 0x56, 0x27, 0x7b, 0x33, 0x69, 0x7b,
	0x47, 0x34, 0xf2, 0x35, 0x8a, 0x3c, 0x86, 0x36, 0x4d, 0xe2, 0x57, 0x38, 0x64, 0x32, 0x72, 0xeb,
	0x9b, 0xce, 0xd6, 0x72, 0xff, 0x46, 0x11, 0xf2, 0x54, 0x3b, 0xf2, 0x88, 0xbd, 0x8a, 0xdf, 0x32,
	0xc0, 0x81, 0x8c, 0x48, 0x0f, 0xea, 0x86, 0x0f, 0xb7, 0x61, 0x02, 0x6e, 0xf5, 0x2c, 0x5b, 0xbd,
	0x82, 0xad, 0xde, 0xae, 0xf6, 0xee, 0x55, 0x7c, 0x0b, 0x23, 0x0f, 0xa1, 0x16, 0x08, 0xce, 0xdd,
	0xa6, 0x81, 0xdf, 0x2c, 0xf2, 0x3f, 0x13, 0x9c, 0xef, 0x4a, 0x45, 0x8f, 0x93, 0x58, 0x9e, 0xee,
	0x55, 0x7c, 0x03, 0xd2, 0xe5, 0xd3, 0xe0, 0xcc, 0x6d, 0x19, 0xec, 0xed, 0xb2, 0x96, 0xe0, 0x8c,
	0x8b, 0x9f, 0x13, 0x0c, 0x23, 0x64, 0xc8, 0xd5, 0x5e, 0xc5, 0xd7, 0x28, 0xf2, 0x21, 0x34, 0x19,
	0xb2, 0x61, 0x86, 0x23, 0xb7, 0x6d, 0x02, 0xca, 0xf3, 0x0e, 0x90, 0x1d, 0x63, 0x26, 0x4f, 0xe3,
	0xd4, 0xc7, 0xd1, 0x18, 0xa5, 0x0e, 0x69, 0x30, 0x64, 0x3e, 0x8e, 0xc8, 0x47, 0x45, 0x94, 0x74,
	0xc1, 0x44, 0x6d, 0x2c, 0x8a, 0x92, 0xa9, 0xe0, 0x12, 0xcb, 0x30, 0x49, 0x1e, 0x40, 0x5d, 0x2a,
	0xaa, 0xd0, 0x5d, 0x36, 0x41, 0xa4, 0x3c, 0x87, 0x66, 0xfe, 0x85, 0xf6, 0xe8, 0x23, 0x1b, 0x08,
	0x19, 0x00, 0x31, 0x8b, 0x61, 0x3a, 0x4e, 0x12, 0x5d, 0x9f, 0x2e, 0xc1, 0x5d, 0x31, 0x81, 0xff,
	0x9f, 0x0f, 0x3c, 0x1c, 0x27, 0xc9, 0xa4, 0xce, 0x8e, 0xbc, 0xb4, 0x47, 0x0e, 0xe1, 0xfa, 0x4c,
	0x3a, 0x5b, 0x9b, 0xbb, 0x6a, 0xf2, 0x75, 0xaf, 0xca, 0x57, 0x9e, 0xe0, 0x9a, 0xbc, 0xbc, 0x49,
	0x3e, 0x01, 0xb0, 0x19, 0x63, 0x7e, 0x22, 0xdc, 0xb5, 0xfc, 0x43, 0xce, 0x25, 0xda, 0xe7, 0x27,
	0x62, 0xaf, 0xe2, 0xb7, 0x65, 0x61, 0x90, 0x47, 0xd0, 0x0a, 0xa9, 0xa2, 0x46, 0x30, 0xeb, 0x26,
	0xec, 0x7a, 0x11, 0xf6, 0x9c, 0x2a, 0x3a, 0xd1, 0x4b, 0x53, 0xc3, 0xb4, 0x5c, 0x8a, 0x08, 0xfd,
	0x95, 0x3a, 0xf3, 0x11, 0x93, 0x73, 0x9b, 0x08, 0x1f, 0x47, 0xde, 0x3b, 0x50, 0x3d, 0xa2, 0x11,
	0x69, 0x43, 0x7d, 0x77, 0x70, 0x78, 0xf4, 0xb2, 0x53, 0x21, 0xab, 0xd0, 0x7e, 0xb6, 0xf7, 0xf4,
	0x60, 0xf8, 0xdd, 0xc1, 0xb7, 0x2f, 0x3b, 0xce, 0x4e, 0x1b, 0x9a, 0x81, 0xe0, 0x0a, 0xb9, 0xf2,
	0x76, 0x60, 0x75, 0x46, 0x48, 0xe4, 0x26, 0x34, 0xd2, 0xb3, 0x78, 0x18, 0x17, 0xbd, 0x57, 0x4f,
	0xcf, 0xe2, 0xfd, 0x90, 0x6c, 0x40, 0x2b, 0x0e, 0x91, 0xab, 0x58, 0x9d, 0x17, 0x2d, 0x53, 0xd8,
	0xde, 0x6f, 0x0e, 0xac, 0x4c, 0xab, 0x9d, 0xf4, 0x00, 0x58, 0x29, 0x05, 0x93, 0x67, 0xb9, 0xbf,
	0x36, 0x2b, 0x12, 0x7f, 0x0a, 0x41, 0x7a, 0xd0, 0x56, 0x31, 0x43, 0xa9, 0x28, 0x4b, 0x4d, 0xf6,
	0xe5, 0x7e, 0xa7, 0x80, 0x1f, 0x22, 0x66, 0x47, 0x31, 0x43, 0x7f, 0x02, 0x99, 0x29, 0xa6, 0x7a,
	0xa9, 0x98, 0xcf, 0xa0, 0x55, 0x84, 0x90, 0xdb, 0xd0, 0x8c, 0x79, 0x30, 0xe4, 0x63, 0x96, 0x0f,
	0x80, 0x46, 0xcc, 0x83, 0x83, 0x31, 0xd3, 0x0e, 0x89, 0x23, 0xe3, 0x58, 0xb2, 0x0e, 0x89, 0xa3,
	0x83, 0x31, 0xf3, 0x9e, 0x40, 0xc3, 0xd6, 0xa7, 0xff, 0x03, 0x79, 0x98, 0x8a, 0x98, 0x2b, 0x13,
	0xdc, 0xf6, 0x4b, 0x7b, 0x8a, 0xa3, 0xa5, 0x29, 0x8e, 0xbc, 0xfb, 0xb0, 0x7e, 0xa9, 0xd1, 0xf4,
	0x00, 0xc2, 0x2c, 0x13, 0x59, 0x9e, 0xc2, 0x1a, 0xde, 0x09, 0x5c, 0x9b, 0x6b, 0x30, 0xf2, 0x04,
	0x3a, 0x12, 0x93, 0x13, 0xa3, 0xa8, 0x8c, 0x51, 0x15, 0x0b, 0x9e, 0x53, 0x57, 0x72, 0x51, 0x4c,
	0x48, 0x7f, 0x5d, 0x23, 0xf7, 0x27, 0x40, 0xfd, 0x3f, 0xfa, 0x8f, 0xb9, 0xbb, 0xb4, 0x59, 0xd5,
	0x05, 0x19, 0xc3, 0x3b, 0x06, 0x32, 0xdf, 0x92, 0xe4, 0x3d, 0xa8, 0x9b, 0x59, 0xe4, 0x3a, 0x9b,
	0xd5, 0x85, 0xd9, 0xad, 0x9b, 0xbc, 0x0b, 0xb5, 0x10, 0x69, 0x68, 0x52, 0x2e, 0x82, 0x19, 0xaf,
	0xc7, 0x01, 0x26, 0x7a, 0x9f, 0x26, 0xd6, 0x99, 0x26, 0x96, 0xdc, 0x01, 0x3b, 0x62, 0x0b, 0xd2,
	0xda, 0x7e, 0xd3, 0xd8, 0xfb, 0x21, 0xf9, 0x40, 0x33, 0x6d, 0x73, 0x9a, 0xaf, 0xb9, 0xe8, 0xbf,
	0x4a, 0x84, 0xf7, 0x13, 0xac, 0xcd, 0xf6, 0x17, 0xb9, 0x05, 0x8d, 0x04, 0x69, 0x88, 0x59, 0xae,
	0xd8, 0xdc, 0x22, 0x7d, 0x80, 0x34, 0x13, 0x29, 0x66, 0x2a, 0x46, 0x99, 0xcb, 0xaa, 0x9c, 0x3a,
	0x87, 0xa5, 0xc7, 0x9f, 0x42, 0x79, 0x5f, 0x03, 0x4c, 0x3c, 0xfa, 0x22, 0xca, 0x55, 0x6a, 0xb8,
	0x5a, 0xf1, 0x0b, 0x93, 0x78, 0x50, 0x3f, 0x89, 0x13, 0x93, 0x56, 0x93, 0xb3, 0x52, 0xa4, 0xfd,
	0x32, 0x4e, 0xd0, 0xb7, 0x2e, 0xef, 0x57, 0xa8, 0x69, 0x93, 0x10, 0xa8, 0xa5, 0x54, 0x9d, 0xe6,
	0x12, 0x30, 0x6b, 0x72, 0x0f, 0x6a, 0x4c, 0x84, 0xf6, 0x0e, 0x5b, 0xeb, 0x5f, 0x9b, 0x0e, 0xef,
	0x0d, 0x44, 0x88, 0xbe, 0x71, 0x6b, 0x11, 0x32, 0x54, 0x54, 0x37, 0x76, 0x21, 0xf4, 0xc2, 0xf6,
	0xba, 0x50, 0xd3, 0x48, 0x02, 0xd0, 0x78, 0x9a, 0xa6, 0xc8, 0xc3, 0x4e, 0x45, 0xaf, 0x7d, 0xca,
	0x43, 0xc1, 0x3a, 0x8e, 0xf7, 0x1c, 0x6e, 0x2d, 0x9e, 0x68, 0xe4, 0x01, 0x34, 0x31, 0x31, 0xfa,
	0xbc, 0x52, 0x60, 0x05, 0xc0, 0xfb, 0x0a, 0x6e, 0x2e, 0x9c, 0xb3, 0xb3, 0x3d, 0xeb, 0xfc, 0x6b,
	0xcf, 0x7a, 0xdf, 0xc3, 0xf2, 0xd4, 0x80, 0xd3, 0x77, 0xb0, 0x66, 0x69, 0xc8, 0x29, 0xc3, 0xa2,
	0xbf, 0xf4, 0xc6, 0x01, 0x65, 0x48, 0xde, 0x9f, 0x3c, 0x00, 0xec, 0x67, 0x5b, 0x2f, 0x33, 0xdb,
	0xed, 0xf2, 0x45, 0xe0, 0xfd, 0x08, 0xcd, 0x7c, 0x4f, 0xf3, 0x6c, 0x88, 0xb2, 0x2a, 0x30, 0x6b,
	0xf2, 0x08, 0x1a, 0xd4, 0x90, 0x93, 0x2b, 0xab, 0x9c, 0xd1, 0x96, 0xb2, 0x41, 0x4e, 0xa6, 0xbe,
	0xa6, 0x2c, 0x6e, 0x07, 0x26, 0x94, 0x7b, 0x9f, 0xc3, 0xda, 0x2c, 0x4e, 0xf7, 0x99, 0x54, 0x34,
	0xb3, 0xc4, 0x55, 0x7d, 0x6b, 0x58, 0x05, 0xf2, 0x48, 0x9d, 0x9a, 0x72, 0xab, 0x7e, 0x6e, 0x79,
	0xe7, 0xf6, 0xcc, 0x05, 0x65, 0xff, 0x78, 0xe6, 0xc5, 0x33, 0x85, 0x6c, 0x97, 0x07, 0xa8, 0xcd,
	0x5e, 0xff, 0xb6, 0xb0, 0xa9, 0xdb, 0x39, 0xaf, 0xbf, 0x0e, 0xd5, 0x0c, 0x47, 0xde, 0x7d, 0x58,
	0x9d, 0x41, 0x4c, 0xd5, 0xe8, 0x4c, 0xd7, 0xd8, 0xff, 0x05, 0x1a, 0xf6, 0x71, 0x43, 0x3e, 0x06,
	0xd0, 0xbf, 0x2f, 0x54, 0x86, 0x94, 0x91, 0x39, 0x4d, 0x6c, 0xcc, 0xed, 0x78, 0x95, 0x2d, 0xe7,
	0x91, 0x43, 0x3e, 0x85, 0xda, 0x61, 0xcc, 0x23, 0x72, 0xc5, 0x43, 0x66, 0xe3, 0x8a, 0x7d, 0xaf,
	0xb2, 0xf3, 0xc5, 0xeb, 0xb7, 0xdd, 0xca, 0x9b, 0xb7, 0x5d, 0xe7, 0xf5, 0x45, 0xd7, 0x79, 0x73,
	0xd1, 0x75, 0xfe, 0xbc, 0xe8, 0x3a, 0xbf, 0xff, 0xd5, 0xad, 0xfc, 0x70, 0xef, 0x3f, 0xbd, 0x3e,
	0x8f, 0xed, 0x83, 0xf3, 0xf1, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xae, 0x95, 0xcf, 0xad,
	0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RKSyncClient is the client API for RKSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RKSyncClient interface {
	// SyncStream is the gRPC stream used for sending and receiving messages
	SyncStream(ctx context.Context, opts ...grpc.CallOption) (RKSync_SyncStreamClient, error)
	// Ping is used to probe a remote peer's aliveness
	Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
}

type rKSyncClient struct {
	cc *grpc.ClientConn
}

func NewRKSyncClient(cc *grpc.ClientConn) RKSyncClient {
	return &rKSyncClient{cc}
}

func (c *rKSyncClient) SyncStream(ctx context.Context, opts ...grpc.CallOption) (RKSync_SyncStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RKSync_serviceDesc.Streams[0], "/protos.RKSync/SyncStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rKSyncSyncStreamClient{stream}
	return x, nil
}

type RKSync_SyncStreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type rKSyncSyncStreamClient struct {
	grpc.ClientStream
}

func (x *rKSyncSyncStreamClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rKSyncSyncStreamClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rKSyncClient) Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/protos.RKSync/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RKSyncServer is the server API for RKSync service.
type RKSyncServer interface {
	// SyncStream is the gRPC stream used for sending and receiving messages
	SyncStream(RKSync_SyncStreamServer) error
	// Ping is used to probe a remote peer's aliveness
	Ping(context.Context, *types.Empty) (*types.Empty, error)
}

func RegisterRKSyncServer(s *grpc.Server, srv RKSyncServer) {
	s.RegisterService(&_RKSync_serviceDesc, srv)
}

func _RKSync_SyncStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RKSyncServer).SyncStream(&rKSyncSyncStreamServer{stream})
}

type RKSync_SyncStreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type rKSyncSyncStreamServer struct {
	grpc.ServerStream
}

func (x *rKSyncSyncStreamServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rKSyncSyncStreamServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RKSync_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RKSyncServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RKSync/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RKSyncServer).Ping(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RKSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RKSync",
	HandlerType: (*RKSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RKSync_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncStream",
			Handler:       _RKSync_SyncStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/rkcloudchain/rksync/protos/rksync.proto",
}

func (m *Envelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Envelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RKSyncMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RKSyncMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Nonce))
	}
	if len(m.ChainMac) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.ChainMac)))
		i += copy(dAtA[i:], m.ChainMac)
	}
	if m.Tag != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Tag))
	}
	if m.Content != nil {
		nn1, err := m.Content.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RKSyncMessage_AliveMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AliveMsg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.AliveMsg.Size()))
		n2, err := m.AliveMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *RKSyncMessage_Empty) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Empty != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Empty.Size()))
		n3, err := m.Empty.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *RKSyncMessage_Conn) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Conn != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Conn.Size()))
		n4, err := m.Conn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *RKSyncMessage_Ack) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ack != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Ack.Size()))
		n5, err := m.Ack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *RKSyncMessage_MemReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MemReq != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.MemReq.Size()))
		n6, err := m.MemReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *RKSyncMessage_MemRes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MemRes != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.MemRes.Size()))
		n7, err := m.MemRes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *RKSyncMessage_State) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.State != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.State.Size()))
		n8, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *RKSyncMessage_StatePullRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StatePullRequest != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.StatePullRequest.Size()))
		n9, err := m.StatePullRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *RKSyncMessage_StatePullResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StatePullResponse != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.StatePullResponse.Size()))
		n10, err := m.StatePullResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *RKSyncMessage_StateInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StateInfo != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.StateInfo.Size()))
		n11, err := m.StateInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *RKSyncMessage_DataMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DataMsg != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.DataMsg.Size()))
		n12, err := m.DataMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *RKSyncMessage_DataReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DataReq != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.DataReq.Size()))
		n13, err := m.DataReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *ConnEstablish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnEstablish) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PkiId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.PkiId)))
		i += copy(dAtA[i:], m.PkiId)
	}
	if len(m.Identity) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.Identity)))
		i += copy(dAtA[i:], m.Identity)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AliveMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliveMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Membership != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Membership.Size()))
		n14, err := m.Membership.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Timestamp.Size()))
		n15, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.Identity) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.Identity)))
		i += copy(dAtA[i:], m.Identity)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PeerTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IncNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.IncNum))
	}
	if m.SeqNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.SeqNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	if len(m.PkiId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.PkiId)))
		i += copy(dAtA[i:], m.PkiId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Acknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Acknowledgement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MembershipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MembershipRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfInformation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.SelfInformation.Size()))
		n16, err := m.SelfInformation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Known) > 0 {
		for _, b := range m.Known {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRksync(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MembershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MembershipResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Alive) > 0 {
		for _, msg := range m.Alive {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRksync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Dead) > 0 {
		for _, msg := range m.Dead {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRksync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChainState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SeqNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.SeqNum))
	}
	if len(m.ChainId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.ChainId)))
		i += copy(dAtA[i:], m.ChainId)
	}
	if m.Envelope != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Envelope.Size()))
		n17, err := m.Envelope.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChainStateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainStateInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Leader) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.Leader)))
		i += copy(dAtA[i:], m.Leader)
	}
	if m.Properties != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Properties.Size()))
		n18, err := m.Properties.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Properties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Properties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, b := range m.Members {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRksync(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Files) > 0 {
		for _, msg := range m.Files {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRksync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *File) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *File) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Mode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Mode))
	}
	if len(m.Metadata) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.Metadata)))
		i += copy(dAtA[i:], m.Metadata)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChainStatePullResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainStatePullResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Element != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Element.Size()))
		n19, err := m.Element.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChainStatePullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainStatePullRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Timestamp.Size()))
		n20, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	if m.Payload != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Payload.Size()))
		n21, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Metadata != nil {
		nn22, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Payload_Append) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Append != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Append.Size()))
		n23, err := m.Append.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *AppendMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Start))
	}
	if m.Length != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	if len(m.PkiId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRksync(dAtA, i, uint64(len(m.PkiId)))
		i += copy(dAtA[i:], m.PkiId)
	}
	if m.Req != nil {
		nn24, err := m.Req.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn24
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataRequest_Append) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Append != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Append.Size()))
		n25, err := m.Append.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *AppendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRksync(dAtA, i, uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRksync(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Envelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RKSyncMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovRksync(uint64(m.Nonce))
	}
	l = len(m.ChainMac)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovRksync(uint64(m.Tag))
	}
	if m.Content != nil {
		n += m.Content.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RKSyncMessage_AliveMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AliveMsg != nil {
		l = m.AliveMsg.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Empty != nil {
		l = m.Empty.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_Conn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conn != nil {
		l = m.Conn.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_MemReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemReq != nil {
		l = m.MemReq.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_MemRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemRes != nil {
		l = m.MemRes.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_StatePullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatePullRequest != nil {
		l = m.StatePullRequest.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_StatePullResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatePullResponse != nil {
		l = m.StatePullResponse.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_StateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateInfo != nil {
		l = m.StateInfo.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_DataMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataMsg != nil {
		l = m.DataMsg.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *RKSyncMessage_DataReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataReq != nil {
		l = m.DataReq.Size()
		n += 2 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *ConnEstablish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PkiId)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AliveMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Membership != nil {
		l = m.Membership.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PeerTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncNum != 0 {
		n += 1 + sovRksync(uint64(m.IncNum))
	}
	if m.SeqNum != 0 {
		n += 1 + sovRksync(uint64(m.SeqNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	l = len(m.PkiId)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Acknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MembershipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfInformation != nil {
		l = m.SelfInformation.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	if len(m.Known) > 0 {
		for _, b := range m.Known {
			l = len(b)
			n += 1 + l + sovRksync(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MembershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Alive) > 0 {
		for _, e := range m.Alive {
			l = e.Size()
			n += 1 + l + sovRksync(uint64(l))
		}
	}
	if len(m.Dead) > 0 {
		for _, e := range m.Dead {
			l = e.Size()
			n += 1 + l + sovRksync(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChainState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqNum != 0 {
		n += 1 + sovRksync(uint64(m.SeqNum))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.Envelope != nil {
		l = m.Envelope.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChainStateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Leader)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Properties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, b := range m.Members {
			l = len(b)
			n += 1 + l + sovRksync(uint64(l))
		}
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovRksync(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovRksync(uint64(m.Mode))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChainStatePullResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Element != nil {
		l = m.Element.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChainStatePullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.Metadata != nil {
		n += m.Metadata.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Payload_Append) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Append != nil {
		l = m.Append.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *AppendMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovRksync(uint64(m.Start))
	}
	if m.Length != 0 {
		n += 1 + sovRksync(uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	l = len(m.PkiId)
	if l > 0 {
		n += 1 + l + sovRksync(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataRequest_Append) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Append != nil {
		l = m.Append.Size()
		n += 1 + l + sovRksync(uint64(l))
	}
	return n
}
func (m *AppendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovRksync(uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRksync(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRksync(x uint64) (n int) {
	return sovRksync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Envelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Envelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Envelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RKSyncMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RKSyncMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RKSyncMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainMac", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainMac = append(m.ChainMac[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainMac == nil {
				m.ChainMac = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= RKSyncMessage_Tag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AliveMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_AliveMsg{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_Empty{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnEstablish{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_Conn{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Acknowledgement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_Ack{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MembershipRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_MemReq{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemRes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MembershipResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_MemRes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChainState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_State{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatePullRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChainStatePullRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_StatePullRequest{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatePullResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChainStatePullResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_StatePullResponse{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChainStateInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_StateInfo{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_DataMsg{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RKSyncMessage_DataReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnEstablish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnEstablish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnEstablish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkiId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkiId = append(m.PkiId[:0], dAtA[iNdEx:postIndex]...)
			if m.PkiId == nil {
				m.PkiId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = append(m.Identity[:0], dAtA[iNdEx:postIndex]...)
			if m.Identity == nil {
				m.Identity = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliveMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliveMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliveMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Membership", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Membership == nil {
				m.Membership = &Member{}
			}
			if err := m.Membership.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &PeerTime{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = append(m.Identity[:0], dAtA[iNdEx:postIndex]...)
			if m.Identity == nil {
				m.Identity = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncNum", wireType)
			}
			m.IncNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkiId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkiId = append(m.PkiId[:0], dAtA[iNdEx:postIndex]...)
			if m.PkiId == nil {
				m.PkiId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Acknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Acknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Acknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MembershipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MembershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MembershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInformation == nil {
				m.SelfInformation = &Envelope{}
			}
			if err := m.SelfInformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Known", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Known = append(m.Known, make([]byte, postIndex-iNdEx))
			copy(m.Known[len(m.Known)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MembershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MembershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MembershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alive = append(m.Alive, &Envelope{})
			if err := m.Alive[len(m.Alive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dead = append(m.Dead, &Envelope{})
			if err := m.Dead[len(m.Dead)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envelope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Envelope == nil {
				m.Envelope = &Envelope{}
			}
			if err := m.Envelope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainStateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainStateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainStateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leader = append(m.Leader[:0], dAtA[iNdEx:postIndex]...)
			if m.Leader == nil {
				m.Leader = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = &Properties{}
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Properties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Properties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Properties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, make([]byte, postIndex-iNdEx))
			copy(m.Members[len(m.Members)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &File{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= File_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainStatePullResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainStatePullResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainStatePullResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Element == nil {
				m.Element = &Envelope{}
			}
			if err := m.Element.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainStatePullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainStatePullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainStatePullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &PeerTime{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &Payload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Append", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppendMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &Payload_Append{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkiId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkiId = append(m.PkiId[:0], dAtA[iNdEx:postIndex]...)
			if m.PkiId == nil {
				m.PkiId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Append", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRksync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRksync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppendRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &DataRequest_Append{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRksync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRksync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRksync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRksync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRksync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRksync
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRksync
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRksync
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRksync(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRksync
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRksync = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRksync   = fmt.Errorf("proto: integer overflow")
)
