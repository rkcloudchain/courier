// Copyright Rockontrol Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

syntax = "proto3";

package protos;

import "google/protobuf/empty.proto";
import "gogoproto/gogo.proto";
import "syncpb/sync.proto";

option go_package = "github.com/rkcloudchain/rksync/protos" ;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = true;

service RKSync {
    // SyncStream is the gRPC stream used for sending and receiving messages
    rpc SyncStream(stream Envelope) returns (stream Envelope) {}

    // Ping is used to probe a remote peer's aliveness
    rpc Ping (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message Envelope {
    bytes payload = 1;
    bytes signature = 2;
}

message RKSyncMessage {
    uint64 nonce = 1;
    bytes chain_mac = 2;
    enum Tag {
        EMPTY     = 0;
        CHAN_ONLY = 1;
    }
    Tag tag = 3;
    oneof content {
        AliveMessage alive_msg = 5;
        google.protobuf.Empty empty = 6;
        ConnEstablish conn = 7;
        Acknowledgement ack = 8;
        MembershipRequest mem_req = 9;
        MembershipResponse mem_res = 10;
        ChainState state = 11;
        ChainStatePullRequest state_pull_request = 12;
        ChainStatePullResponse state_pull_response = 13;
        ChainStateInfo state_info = 14;
        DataMessage data_msg = 15;
        DataRequest data_req = 16;
        LeaveChainMessage leave_chain = 17;
    }
}

message ConnEstablish {
    bytes pki_id = 1;
    bytes identity = 2;
}

message AliveMessage {
    Member membership = 1;
    PeerTime timestamp = 2;
    bytes identity = 3;
}

message PeerTime {
    uint64 inc_num = 1;
    uint64 seq_num = 2;
}

message Member {
    string endpoint = 1;
    bytes pki_id = 2;
}

message Acknowledgement {
    string error = 1;
}

message MembershipRequest {
    Envelope self_information = 1;
    repeated Envelope known = 2;
}

message MembershipResponse {
    repeated Envelope alive = 1;
    repeated Envelope dead = 2;
}

message ChainState {
    uint64 seq_num = 1;
    string chain_id = 2;
    Envelope envelope = 3;
}

message ChainStateInfo {
    bytes leader = 1;
    Properties properties = 2;
}

message Properties {
    repeated bytes members = 1;
    repeated File files = 2;
}

message File {
    string path = 1;
    enum Mode {
        Append = 0;
        Random = 1;
    }
    Mode mode = 2;
    bytes metadata = 3;
}

message ChainStatePullResponse {
    Envelope element = 1;
}

message ChainStatePullRequest {
    PeerTime timestamp = 1;
}

message DataMessage {
    string file_name = 1;
    bytes pki_id = 2;
    oneof payload {
        AppendPayload append = 4;
        RandomPayload random = 5;
        RandomPatcher patcher = 6;
    }
}

message AppendPayload {
    int64 start_offset = 1;
    bytes data = 2;
}

message RandomPayload {
    int64 start_offset = 1;
    bytes data = 2;
}

message RandomPatcher {
    int64 mod_time = 1;
    syncpb.PatcherBlockSpan patcher = 2;
}

message RandomMetadata {
    int64 start_offset = 1;
}

message DataRequest {
    string file_name = 1;
    bytes pki_id = 2;
    oneof req {
        AppendRequest append = 4;
        RandomRequest random = 5;
        BlockRequest block_req = 6;
    }
}

message AppendRequest {
    int64 length = 1;
}

message RandomRequest {
    int64 mod_time = 1;
    syncpb.ChunkChecksums checksums = 2;
}

message BlockRequest {
    int64 start_offset = 1;
    int64 end_offset = 2;
}

message LeaveChainMessage {
    bytes chain_mac = 1;
}